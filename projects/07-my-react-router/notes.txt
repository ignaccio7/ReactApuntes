para estilar en este momento lo haremos no con 
boltcss o con watercss

sera con simplecss
https://simplecss.org/demo
https://github.com/kevquirk/simple.css/wiki/Getting-Started-With-Simple.css
<link rel="stylesheet" href="https://unpkg.com/simpledotcss/simple.min.css">

- [x] Instalar linter
- [x] Crear una forma de hacer MPAs (Multiple Page Application) -> que mas o menos seria el renderizado condicional que manejamos a un principio -> si vamos a network cuando cambiamos entre paginas podremos ver que se esta descargando toda la pagina en si todos los recursos y demas
- [x] Crear un forma de hacer SPAs (Single Page Application)
- [x] Poder navegar entre páginas con el boton atras
- [x] Crear componente Link para hacerlo declarativo
- [x] Crear componente Router para hacerlo mas declarativo
- [x] Soportar rutas por defecto (404)
- [x] Soportar rutas con parámetros // vamos a instalar una dependencia para facilitarnos que es lo que se podria decir que todos usan -> npm install path-to-regexp -E  (que tambien esto es lo que usa express)
- [x] Componente <Route /> para hacerlo mas declarativo
- [x] Lazy Loading de las rutas -> con import { lazy } from 'react' que nos ayudara a importar de forma dinamica los componentes y hasta que no lo veamos no se descarga el contenido
una forma de poder ver antes de usar Lazy es ir a la consola apretar la tecla Esc y luego en lso 3 puntitos a Search o Coverage y ver todo lo que nos esta cargando el sitios
- [x] Testing
npm install vitest -D
ahora en el package.json en los scripts "test":"vitest"
como hacemos test para el Router y este deberia renderizar para poder probarlo
happy-dom -> para simular que tenemos un arbol de elementos similar al dom
y @testing-library/react -> es una dependencia seria de utilidades que te permite renderizar algo y preguntar si existe el boton el componente hacer click esas cosas

npm install happy-dom @testing-library/react -D

y en el vite.config.ts
  test: {
    environment: 'happy-dom'
  }

- [x] Publicar el paquete en NPM

para poder Publicar
añadimos un script en el packagejson que diga
  "prepare": "",
y necesitamos un compilador para que transpile nuestro codigo
para eso instalaremos SWC que es una alternativa a Babel
y asi instalamos  
https://swc.rs/docs/getting-started
https://swc.rs/docs/configuration/swcrc

  npm i -D @swc/cli @swc/core

y luego creamos un archivo .swcrc
en el cual copiaremos las configuraciones que tiene por defecto
y un poco revisando target colocamos la etiqueta en jsx true en loose true que lo que hara es hacer unas transformaciones con codigo mas eficiente pero que no comlua 100% la especificacion

y luego
  ./node_modules/.bin/swc ./src/Router.jsx
y podremos ver que si nos ah compilador correctamente

en el archivo .swcrc
cuando compile react podremos ver que alfinal nos dice ReacCreateElemento pero nosotros lo queremos como jsx asi que
añadimos
"transform": {
        "react": {
            "runtime": "automatic"
        }
    },

y ya para que compile todos los archivos que necesitamos

  ./node_modules/.bin/swc ./src/*.jsx -d lib

y para de mejor manera ponerlo como un scrpt en el package.json colocamos
 "prepare": "swc ./src/*.jsx -d lib",
-> prepare es un script especial que se va ejecutar justo antes que hagamos un publish
tambien añadimos en el package 
  "version":"0.0.1",
  "main":"lib/index.js",
  "module": "lib/index.js",
y quitamos el "private": true,

-> para que funcion el index.js como punto de entra creamos en el src
el archivo index.jsx y exportamos el Router  el Link el Route y copiamos las constantes con el comando de mas abajo

podemos ejecutar para visualizar que esta haciendo
  npm run prepare

como paso adicional borraremos los archivos que no necesitamos y modificamos el 
  "prepare":"swc ./src/*.jsx -d lib && rm lib/App.js lib/main.js lib/Router.test.js && cp src/*.js lib"

una ultima cosa es colocar en el packagejson las dependencias 
que necesitamos que tenga instalado nuestro proyecto
asi 

"peerDependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
  },

peerDependencies significa que no los vamos a instalar nosotros sino que el proyecto ya deberia tener instalado

por ultimo ultimo
creamos un fichero
.npmignore
  src

para que ignore la carpeta source

lo ultimo que arreglamos es -> "prepare":"swc ./src/*.jsx -d lib && cp src/*.js lib",

y ya colocamos
  ./node_modules/.bin/swc ./src/*.jsx -d lib // -> este si
  npm run prepare //-> esto se ejecuta por defecto al hacer publish asi que no en la consola
  npm publish //-> este tambien



